"""
This type stub file was generated by pyright.
"""

GOOGLE_ENGINE = ...
BING_ENGINE = ...
BAIDU_ENGINE = ...
GOOGLE_SCHOLAR_ENGINE = ...
YANDEX_ENGINE = ...
EBAY_ENGINE = ...
YAHOO_ENGINE = ...
HOME_DEPOT_ENGINE = ...
YOUTUBE_ENGINE = ...
class SerpApiClient:
    """SerpApiClient enables to query any search engines supported by SerpApi and parse the results.
    ```python
    from serpapi import GoogleSearch
    search = SerpApiClient({
        "q": "Coffee", 
        "location": "Austin,Texas", 
        "engine": "google",
        "api_key": "<your private key>"
        })
	data = search.get_json()
    ```

    https://serpapi.com/search-api
    """
    BACKEND = ...
    SERP_API_KEY = ...
    def __init__(self, params_dict, engine=..., timeout=...) -> None:
        ...
    
    def construct_url(self, path=...): # -> tuple[str, Any | dict[Any, Any]]:
        ...
    
    def get_response(self, path=...): # -> Response:
        """Returns:
            Response object provided by requests.get
        """
        ...
    
    def get_results(self, path=...): # -> str:
        """Returns:
            Response text field
        """
        ...
    
    def get_html(self): # -> str:
        """Returns:
            Raw HTML search result from Gooogle
        """
        ...
    
    def get_json(self): # -> Any:
        """Returns:
            Formatted JSON search results using json package
        """
        ...
    
    def get_raw_json(self): # -> str:
        """Returns:
            Formatted JSON search result as string
        """
        ...
    
    def get_dictionary(self): # -> dict[Any, Any]:
        """Returns:
            Dict with the formatted response content
        """
        ...
    
    def get_dict(self): # -> dict[Any, Any]:
        """Returns:
            Dict with the formatted response content
            (alias for get_dictionary)
        """
        ...
    
    def get_object(self): # -> Any:
        """Returns: 
            Dynamically created python object wrapping the result data structure
        """
        ...
    
    def make_pyobj(self, name, node): # -> Any:
        ...
    
    def get_search_archive(self, search_id, format=...): # -> Any | str:
        """Retrieve search result from the Search Archive API
        Parameters:
            search_id (int): unique identifier for the search provided by metadata.id 
            format (string): search format: json or html [optional]
        Returns:
            dict|string: search result from the archive
        """
        ...
    
    def get_account(self): # -> Any:
        """Get account information using Account API
        Returns:
            dict: account information
        """
        ...
    
    def get_location(self, q, limit=...): # -> Any:
        """Get location using Location API
        Parameters:
            q (string): location (like: city name..)
            limit (int): number of matches returned
        Returns:
            dict: Location matching q
        """
        ...
    
    def pagination(self, start=..., end=..., page_size=...): # -> Pagination:
        """Return:
            Generator to iterate the search results pagination
        """
        ...
    


